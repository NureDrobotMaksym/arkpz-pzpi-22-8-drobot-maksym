Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи №3
з дисципліни «Аналіз та рефакторинг коду»




Виконав:
ст. гр. ПЗПІ-22-8
Дробот Максим Євгенович

Перевірив:
ст. викл. каф. ПІ
Сокорчук Ігор Петрович 





Харків 2025
3 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ


	3.1 Мета роботи
	На лабораторній роботі №3 потрібно розробити бізнес-логику та функції адміністрування серверної частини  програмної системи.	
	3.2 Хід роботи
	Розробимо бізнес-логіку системи (див. додаток А). Розробимо діаграми для кращого розуміння функціональності та роботи системи (див. додатки Б та В).
	Серверна частина системи керування доступом для підприємств побудована на основі Node.js з використанням фреймворку Express.js та бази даних PostgreSQL. Основні компоненти включають маршрути для обробки запитів, контролери для реалізації бізнес-логіки та моделі для взаємодії з базою даних. Маршрути забезпечують доступ до функцій керування замками та користувачами, включаючи перегляд, додавання, оновлення та видалення записів. Контролери обробляють дані, виконуючи SQL-запити для роботи з таблицями, такими як "locks" та "users". Для безпеки реалізовано механізми автентифікації та авторизації за допомогою JWT токенів, а middleware перевіряють права доступу до адміністративних функцій. Інтеграція з MQTT-брокером дозволяє приймати дані з IoT-сенсорів для моніторингу подій та оновлення відповідної інформації в базі даних.
     Висновки
	На даній лабораторній роботі була розроблена бізнес-логіка системи та функції адміністрування. Відеозапис захисту даної лабораторної роботи можна побачити за наступним посиланням: https://youtu.be/l8daN8H3bCU


 Додаток А – Фрагменти бізнес-логіки


1 import Service from "@/service";
2 import UserRepository from "@/repositories/user-repository";
3 import { UserIdSchema, UserUpdateRequestSchema } from "@/schemas/user";
4 
5 export default class UserService extends Service {
6   private userRepository: UserRepository;
7 
8   public constructor(userRepository: UserRepository) {
9     super();
10 
11     this.userRepository = userRepository;
12   }
13 
14   public async updateUser(id: any, data: any) {
15     let validationResult;
16 
17     validationResult = UserIdSchema.safeParse(id);
18     if (!validationResult.success) {
19       return this.failure("A validation error occurred.");
20     }
21 
22     validationResult = UserUpdateRequestSchema.safeParse(data);
23     if (!validationResult.success) {
24       return this.failure("A validation error occurred.");
25     }
26 
27     let user = await this.userRepository.findUserById(id);
28     if (!user) {
29       return this.failure("User does not exist.");
30     }
31 
32     const { name, description } = validationResult.data;
33 
34     await this.userRepository.updateUser(id, name, description);
35 
36     return this.success();
37   }
38 
39   public async deleteUser(id: any) {
40     const validationResult = UserIdSchema.safeParse(id);
41     if (!validationResult.success) {
42       return this.failure("A validation error occurred.");
43     }
44 
45     let user = await this.userRepository.findUserById(id);
46     if (!user) {
47       return this.failure("User does not exist.");
48     }
49 
50     await this.userRepository.deleteUser(id);
51 
52     return this.success();
53   }
54 
55   public async getAllUsers() {
56     let users = await this.userRepository.getAllUsers();
57 
58     return this.success(users);
59   }
60 }
61


Додаток Б – Діаграма діяльності





Додаток В – Діаграма взаємодії між клієнтом і сервером



